<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>簡單</title><link>https://huxubo.github.io</link><description>于代码中找寻簡單之美</description><copyright>簡單</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://cdn.37o.cc/logo.jpg</url><title>avatar</title><link>https://huxubo.github.io</link></image><lastBuildDate>Fri, 21 Jun 2024 01:53:37 +0000</lastBuildDate><managingEditor>簡單</managingEditor><ttl>60</ttl><webMaster>簡單</webMaster><item><title>PHP之RSA加密解密</title><link>https://huxubo.github.io/post/PHP-zhi-RSA-jia-mi-jie-mi.html</link><description>RSA算法属于非对称加密算法,非对称加密算法需要两个秘钥:公开密钥(publickey)和私有秘钥(privatekey).公开密钥和私有秘钥是一对,如果公开密钥对数据进行加密,只有用对应的私有秘钥才能解密;如果私有秘钥对数据进行加密那么只有用对应的公开密钥才能解密.因为加密解密使用的是两个不同的秘钥,所以这种算法叫做非对称加密算法.简单的说就是公钥加密私钥解密,私钥加密公钥解密**&#13;
```php&#13;
&lt;?php&#13;
&#13;
namespace util;&#13;
&#13;
&#13;
/**&#13;
 * rsa加密类&#13;
 * Class Rsa&#13;
 */&#13;
class RsaUtil&#13;
{&#13;
&#13;
    const CHAR_SET = 'UTF-8';&#13;
    const BASE_64_FORMAT = 'UrlSafeNoPadding';&#13;
    const RSA_ALGORITHM_KEY_TYPE = OPENSSL_KEYTYPE_RSA;&#13;
    const RSA_ALGORITHM_SIGN = OPENSSL_ALGO_SHA256;&#13;
&#13;
    protected $public_key;&#13;
    protected $private_key;&#13;
    protected $key_len;&#13;
&#13;
    public function __construct($pub_key = '', $pri_key = null)&#13;
    {&#13;
        if ($pub_key) {&#13;
            $this-&gt;public_key = $pub_key;&#13;
            $pub_id = openssl_pkey_get_public($this-&gt;public_key);&#13;
            $this-&gt;key_len = openssl_pkey_get_details($pub_id)['bits'];&#13;
        }&#13;
        if ($pri_key) {&#13;
            $this-&gt;private_key = $pri_key;&#13;
            $pri_id = openssl_pkey_get_private($this-&gt;private_key);&#13;
            $this-&gt;key_len = openssl_pkey_get_details($pri_id)['bits'];&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * 创建密钥对&#13;
     */&#13;
    public static function createKeys($key_size = 1024)&#13;
    {&#13;
        $config = array(&#13;
            'private_key_bits' =&gt; $key_size,&#13;
            'private_key_type' =&gt; self::RSA_ALGORITHM_KEY_TYPE,&#13;
        );&#13;
        $res = openssl_pkey_new($config);&#13;
        openssl_pkey_export($res, $private_key);&#13;
        $public_key_detail = openssl_pkey_get_details($res);&#13;
        $public_key = $public_key_detail['key'];&#13;
&#13;
        return array(&#13;
            'public_key' =&gt; $public_key,&#13;
            'private_key' =&gt; $private_key,&#13;
        );&#13;
    }&#13;
&#13;
    /*&#13;
     * 公钥加密&#13;
     */&#13;
    public function publicEncrypt($data)&#13;
    {&#13;
        $encrypted = '';&#13;
        $part_len = $this-&gt;key_len / 8 - 11;&#13;
        $parts = str_split($data, $part_len);&#13;
&#13;
        foreach ($parts as $part) {&#13;
            $encrypted_temp = '';&#13;
            openssl_public_encrypt($part, $encrypted_temp, $this-&gt;public_key);&#13;
            $encrypted .= $encrypted_temp;&#13;
        }&#13;
&#13;
        return base64_encode($encrypted);&#13;
    }&#13;
&#13;
    /*&#13;
     * 私钥解密&#13;
     */&#13;
    public function privateDecrypt($encrypted)&#13;
    {&#13;
        $decrypted = '';&#13;
        $part_len = $this-&gt;key_len / 8; &#13;
        //url  中的get传值默认会吧+号过滤成' '，替换回来就好了&#13;
        str_replace('% ', '+', $encrypted); &#13;
        echo $encrypted;&#13;
        $base64_decoded = base64_decode($encrypted);&#13;
        $parts = str_split($base64_decoded, $part_len);&#13;
        foreach ($parts as $part) {&#13;
            $decrypted_temp = '';&#13;
            openssl_private_decrypt($part, $decrypted_temp, $this-&gt;private_key);&#13;
            $decrypted .= $decrypted_temp;&#13;
        }&#13;
        return $decrypted;&#13;
    }&#13;
&#13;
    /*&#13;
     * 私钥加密&#13;
     */&#13;
    public function privateEncrypt($data)&#13;
    {&#13;
        $encrypted = '';&#13;
        $part_len = $this-&gt;key_len / 8 - 11;&#13;
        $parts = str_split($data, $part_len);&#13;
&#13;
        foreach ($parts as $part) {&#13;
            $encrypted_temp = '';&#13;
            openssl_private_encrypt($part, $encrypted_temp, $this-&gt;private_key);&#13;
            $encrypted .= $encrypted_temp;&#13;
        }&#13;
        return base64_encode($encrypted);&#13;
    }&#13;
&#13;
    /*&#13;
     * 公钥解密&#13;
     */&#13;
    public function publicDecrypt($encrypted)&#13;
    {&#13;
        $decrypted = '';&#13;
        $part_len = $this-&gt;key_len / 8;&#13;
        $base64_decoded = base64_decode($encrypted);&#13;
        $parts = str_split($base64_decoded, $part_len);&#13;
&#13;
        foreach ($parts as $part) {&#13;
            $decrypted_temp = '';&#13;
            openssl_public_decrypt($part, $decrypted_temp, $this-&gt;public_key);&#13;
            $decrypted .= $decrypted_temp;&#13;
        }&#13;
        return $decrypted;&#13;
    }&#13;
&#13;
    /*&#13;
     * 数据加签&#13;
     */&#13;
    public function sign($data)&#13;
    {&#13;
        openssl_sign($data, $sign, $this-&gt;private_key, self::RSA_ALGORITHM_SIGN);&#13;
        return base64_encode($sign);&#13;
    }&#13;
&#13;
    /*&#13;
     * 数据签名验证&#13;
     */&#13;
    public function verify($data, $sign)&#13;
    {&#13;
        $pub_id = openssl_get_publickey($this-&gt;public_key);&#13;
        $res = openssl_verify($data, base64_decode($sign), $pub_id, self::RSA_ALGORITHM_SIGN);&#13;
        return $res;&#13;
    }&#13;
&#13;
}&#13;
。</description><guid isPermaLink="true">https://huxubo.github.io/post/PHP-zhi-RSA-jia-mi-jie-mi.html</guid><pubDate>Fri, 21 Jun 2024 01:44:26 +0000</pubDate></item><item><title>RC4加密解密算法</title><link>https://huxubo.github.io/post/RC4-jia-mi-jie-mi-suan-fa.html</link><description>RC4：Rivest Cipher 4 的缩写，是一种流加密算法，密钥长度可变，它加解密使用相同的密钥。</description><guid isPermaLink="true">https://huxubo.github.io/post/RC4-jia-mi-jie-mi-suan-fa.html</guid><pubDate>Thu, 20 Jun 2024 11:19:04 +0000</pubDate></item></channel></rss>